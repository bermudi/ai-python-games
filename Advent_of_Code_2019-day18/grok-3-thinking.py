from collections import deque

def shortest_path_to_collect_all_keys(grid):
    # Grid dimensions
    height = len(grid)
    width = len(grid[0])
    
    # Find starting position and all keys
    start_x, start_y = None, None
    keys = set()
    for y in range(height):
        for x in range(width):
            if grid[y][x] == '@':
                start_x, start_y = x, y
            elif 'a' <= grid[y][x] <= 'z':
                keys.add(grid[y][x])
    
    # Compute the target key mask
    all_keys_mask = 0
    for key in keys:
        key_index = ord(key) - ord('a')  # 'a' -> 0, 'b' -> 1, etc.
        all_keys_mask |= (1 << key_index)
    
    # Movement directions: up, down, left, right
    directions = [(-1, 0), (1, 0), (0, -1), (0, 1)]
    
    # BFS initialization
    queue = deque([(start_x, start_y, 0, 0)])  # (x, y, key_mask, steps)
    visited = set([(start_x, start_y, 0)])     # Track visited states
    
    while queue:
        x, y, key_mask, steps = queue.popleft()
        
        # Check if all keys are collected
        if key_mask == all_keys_mask:
            return steps
        
        # Explore neighbors
        for dx, dy in directions:
            nx, ny = x + dx, y + dy
            if 0 <= nx < width and 0 <= ny < height:
                cell = grid[ny][nx]
                if cell == '#':
                    continue
                if cell.isupper():  # Door
                    key_needed = ord(cell) - ord('A')  # 'A' -> 0, 'B' -> 1, etc.
                    if not (key_mask & (1 << key_needed)):
                        continue  # Cannot pass without the key
                # Can move to '.', lowercase letters, or passable doors
                new_key_mask = key_mask
                if cell.islower():  # Key
                    key_index = ord(cell) - ord('a')
                    new_key_mask |= (1 << key_index)  # Collect the key
                # If this state hasn’t been visited, enqueue it
                state = (nx, ny, new_key_mask)
                if state not in visited:
                    visited.add(state)
                    queue.append((nx, ny, new_key_mask, steps + 1))
    
    return -1  # No solution found (shouldn’t happen per problem statement)

# Process the input grid
grid_input = [
    "#################################################################################",
    "#.#m............#.........#.............#.........#..c..........P.#.....#...#...#",
    "#.#.#####.#####.#.#.#######.#####.#.#####.###.###.#.#########.###.#.###.#.#.#.#.#",
    "#.#.#.#...#g#...#.#.........#...#.#.#...#.#j..#.#.#.#..i..#...#...#b..#...#...#.#",
    "#.#.#.#.###.#.###.#############.#.###.#.###.###.#.#.#.###.#.###.#####.#########.#",
    "#.#...#...#.....#.....#.....#...#.....#.#...#...#.#.#...#.#...#.#.....#.......#.#",
    "#.###.###.###########.#.###.#.#########N#.###.###.#####.#.###.#.###.###.###.###.#",
    "#...#...#.....#.........#...#.......#...#.#.....#..h....#.....#.....#...#.#.....#",
    "#.#.###.#####.#.###########.#####.#.#.#.#.#.###.#####################.###.#######",
    "#.#...#...#.#.#...#.......#.....#.#.#.#.#.#v..#.....#.........#.#.....#.........#",
    "#.#######.#.#.###.#.#####.#####.#.###.#.#.###.#####.#.###.###.#.#.#####.#######.#",
    "#.#.......#.#.....#.....#...#.#...#...#.#.#.......#...#...#.....#.#.....#...#...#",
    "#.#.#######.###########.###.#.###.#.###.#.#######.#####.#########.#.###.#.#.#####",
    "#.#.....#...#.......#...#.#.#.....#...#.#.....#...#..e#...#.....#.#.#...#.#.#...#",
    "#.#####.#.###.#####.#.###.#.#.#######.#######.#####.#.#.#.#.###.#.#.###.#O#.#.#.#",
    "#.....#.#...#.#...#...#...#.#...#...#...#.Z...#...#.#.#.#.....#.#.#...#.#.#...#.#",
    "#.#####.###.#.###.#####.#.#.###.###.###.#.#####.#.#Q#.#######.#.#.#.#.###.#####.#",
    "#.#.....#...#.#...#.....#.#...#.....#...#....q..#...#.....#...#.#.#.#.....#...#.#",
    "#.#.#####.###.#.#.###.#.#####.#######.#.#################.#.###.#.#########.#.#.#",
    "#.#...#...#...#.#.#...#.#...#.#.....#.#.#x#....d....#...E.#...#..f#.......#.#...#",
    "#.###.#.###.###.#.#.#####.#.#.#.###.#.#.#.#.#####.#.#.#####.###.###.#####.#.#####",
    "#...#.#.#...#...#...#...#.#.#...#...#.#.#.#.....#.#.#s#.....#.#.#...#...#.#.....#",
    "#.###.#.#.###.#.#######.#.#.#####.###.###.###.###.#.#.#######.#.#.###.###.#####.#",
    "#.......#.#...#.#.......#.#.....#.#.....#...#.#...#.#.......S.#...#...#...#...#.#",
    "#.#######.#.###.#.#######.#####.#.#####.#.###.#.###.###############.###.###.#.#.#",
    "#.....#...#...#.#.........#...#...#...#.#.#...#.#.#...#...........#...#.#...#.#.#",
    "#####.#.#######.###########.#.#####.#.#.#.#.###.#.#.###.#######.#.###.#.###.#.#.#",
    "#.....#.#.....#...#...#.....#...#...#...#.#...#.#...#...#...#...#.....#...#.#...#",
    "#.#####.#.###.#.#.###.#.#.###.###.#.#####.###.#.#####.###.#.#.#######.###.#.###.#",
    "#...#...#.#.#.#.#...#...#.#...#...#.....#.....#.......#...#.#...#...#...#...#.#.#",
    "###.#.###.#.#.#.###.#.###.#####.#######.#.#############.#.#####.#.#.#.#######.#.#",
    "#...#.....#...#...#.#...#...#.........#.#...#.........#.#.#.....#.#...#.....#...#",
    "#.#########.#####.#.#######.#.#######.#.###.#.#######.#.#.#.#.#####.###.###.#.###",
    "#.#.......#...#...#.#.....#...#.....#.#.#...#...#.....#.#.#.#.#...#...#...#...#.#",
    "#.#######.###.#.###.#.###.###.#.###.###.#.###.#.#.#####.###.#.#.#.#######.#####.#",
    "#.#.K.....#.#...#.#...#.#...#.#.#...#...#.#...#.#...#.....#.#.#.#.........#.....#",
    "#.#.#####.#.#####.#####.###.#.#.###.#.###.###.#.###.#####.#.###.###############.#",
    "#...#...#.#.........#...#...#.#...#.#...#...#.#...#.......#.....#...#.....#...#t#",
    "#####.###.#####.###.###.#.#######.#.###.###.#####.#######.#######.#.#.###.#.#.#.#",
    "#...............#.......#.........#...............#...............#...#....u#...#",
    "#######################################.@.#######################################",
    "#.........#...#...#.#.....#...#.....#.........................#.....Y...#.......#",
    "#.#.#####.#.#.#.#.#.#.#.#.#.#.#.###.#.#.#########.#########.###.#.#######.#####.#",
    "#.#.#...#...#.#.#.#...#.#...#...#.#...#.#.......#.#.......#.#...#.#...#...#.....#",
    "#.#.#.#.#####.#.#.###.#.#########.#####.#.#####.###.#####.#R#.###.#.#.#.###M###.#",
    "#.#.#.#.....#...#...#.#.#...........#...#.#.#.......#.......#...#...#...#...#...#",
    "#.#.#.#####.#######.###.#.###########.###.#.#.#################.#########.#####.#",
    "#.#.#.#...#.#.....#.....#..........r#.#.#.#.....#.......#.....#.#.#.....#.#...#.#",
    "#U#.#.###.#.#####.#######.#########.#.#.#.#######.#####.#.###.#.#.#.###.#.#.#.#.#",
    "#.#.#.L.#.#.#.....#...#...#...#...#...#.#.#.......#...#.#...#.#.#...#...#.#.#.#.#",
    "#.#.###.#.#.#.#####.#.#.###.#.#.#.#####.#.#.#######.###.###.#.#.#####.#.#.#.#.###",
    "#.#...#...#.#.......#.#...#.#...#.......#...#.........#...#.#.#.#...W.#.#...#...#",
    "#.#######.#.#########.###X#######.#####.#.#######.###.#.###.#.#.#.#############.#",
    "#.......#.#.#.....#.....#.#.....#.#.....#.......#...#.#.....#..l#...#.....#...#.#",
    "#.#####.#.#.#.###.#.#.###.#.###.#.###.#########.#####.###########.#.#.#.#.#.#.#.#",
    "#...#.#...#...#.#.#.#.#.....#...#...#...#...#...#.....#...#.......#...#.#.#.#.#.#",
    "###.#.#########.#.#D###.#####.###.#.###.#.#.#.###.###.###.#.#####.#####.#.#.#.#.#",
    "#.#.#...........#.#.....#...#.#...#.#.#.#.#.#.....#.#...#...#...#.#.....#...#.#.#",
    "#.#T###.#########.###.###.#.#.#####.#.#.###.#######.###.#####.#.#.#.#######.###.#",
    "#.#...#.........#...#...#.#.#..n....#.#.#.............#...#...#.#.#.#.....#.#...#",
    "#.###.#.#####.#.###.#####.#.###.#####.#.#.#########.#####.#.###.###.#.###.#.#.#.#",
    "#.....#.#...#.#...#.#.#...#.#...#...#.#.#.#.....#...#...#.#.#.#.....#...#.#.#.#.#",
    "#.#######.#.#.#.#.#.#.#.###.#####.#.#.#.#.###.#.#.###.#.#.#.#.###.#####.###.#.###",
    "#...#.....#.#.#.#.#.#...#.#.#.....#.#...#...#.#...#...#.....#...#.#...#.....#...#",
    "###.#.#####.###.#.#.#####.#.#.#####.#####.#.#######.###########.###.#I#######.#.#",
    "#.#.#a..#.......#.#.......#...#...#.....#.#.........#.....#....z#...#.......#.#.#",
    "#.#.###.#########.#.#####.#######.#####.#.###########.#.###.#####.#########.#.#.#",
    "#.#...#.#...#...#.#.#...#...#.....#.....#.#...#.....#.#.#...#.....#.#.....#.#.#.#",
    "#.###.#.#.#.###.#.#.#.#.###.#.#####.#####.#.#.#.###.#.#.#.###.#.###.#.###.#.#.#.#",
    "#...#.#...#...#...#.#.#...#...#.....#...#.#.#...#...#.#.#.#...#.H.#.#...#.#.#.#.#",
    "#.###.#######.#####.###.#.###G#.#######.#.#.#####.###.#.#J#######.#.###.#.#.###.#",
    "#..y..#.....#.#...#...#.#.....#.........#.#...#...#...#.#.........#...#.#.C.#...#",
    "#.#####.###.#.#.#.###.#.###############.#.###.#.###.###.###########.###.#####.#.#",
    "#...#.....#.#...#...#.#.#...........#...#.....#.#.#...#.#...B.#..p#.....#.....#.#",
    "###.#.###.#.#.#####.#.###.#####.#####.#########.#.#.#F#.#.#.#.###.#.#####.#####.#",
    "#.#w#.#...#.#...#...#...#.....#.......#.#...#...#.#.#.#.#.#.#.....#.#.......#...#",
    "#.#.###.###.#####.#####.#####.#########.#.#.#.###.#.#.###.#.#######.#.#####A#####",
    "#.#.....#.#.....#.....#.#...#...#...#...#.#...#.....#...#.#.........#.....#....k#",
    "#.#######.#####.#####.#.#.#.###.#.#.#.#.#.#############.#.#####################.#",
    "#.....................#..o#.......#...#.#...............#...V...................#",
    "#################################################################################"
]
grid = [list(line) for line in grid_input]

# Compute the result
result = shortest_path_to_collect_all_keys(grid)
print(result)